/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/product.js":
/*!*********************************!*\
  !*** ./resources/js/product.js ***!
  \*********************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\ndocument.addEventListener('DOMContentLoaded', function () {\n  var searchInput = document.getElementById('search-product');\n  var product_id = document.getElementById('product_id');\n  var resultsContainer = document.getElementById('product-search-results');\n  var unitValue = document.getElementById('unitvalue');\n  var subtotal = document.getElementById('subtotal');\n  var quantity = document.getElementById('qtd');\n  function showProductDropdown(query) {\n    if (query.length > 0) {\n      fetchSearchResults(query);\n    } else {\n      fetchListResults();\n    }\n  }\n  function updateResults(results) {\n    resultsContainer.innerHTML = '';\n    results.forEach(function (result) {\n      var li = document.createElement('li');\n      li.className = 'p-2 hover:bg-gray-200 cursor-pointer';\n      li.textContent = result.name + \" |  R$ \" + result.price;\n      li.addEventListener('click', function () {\n        product_id.value = result.id;\n        searchInput.value = result.name;\n        unitValue.value = result.price;\n        quantity.value = 1;\n        subtotal.value = quantity.value * result.price;\n        quantity.addEventListener('change', function () {\n          subtotal.value = quantity.value * result.price;\n        });\n        resultsContainer.classList.add('hidden');\n      });\n      resultsContainer.appendChild(li);\n    });\n    resultsContainer.classList.remove('hidden');\n  }\n  function fetchSearchResults(_x) {\n    return _fetchSearchResults.apply(this, arguments);\n  }\n  function _fetchSearchResults() {\n    _fetchSearchResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name) {\n      var response, data;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(\"/products/search/\".concat(name));\n          case 3:\n            response = _context.sent;\n            if (response.ok) {\n              _context.next = 6;\n              break;\n            }\n            throw new Error('Network response was not ok');\n          case 6:\n            _context.next = 8;\n            return response.json();\n          case 8:\n            data = _context.sent;\n            updateResults(data);\n            _context.next = 15;\n            break;\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            console.error('Fetch error:', _context.t0);\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 12]]);\n    }));\n    return _fetchSearchResults.apply(this, arguments);\n  }\n  function fetchListResults() {\n    return _fetchListResults.apply(this, arguments);\n  }\n  function _fetchListResults() {\n    _fetchListResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var response, data;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return fetch(\"/products/list\");\n          case 3:\n            response = _context2.sent;\n            if (response.ok) {\n              _context2.next = 6;\n              break;\n            }\n            throw new Error('Network response was not ok');\n          case 6:\n            _context2.next = 8;\n            return response.json();\n          case 8:\n            data = _context2.sent;\n            updateResults(data);\n            _context2.next = 15;\n            break;\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error('Fetch error:', _context2.t0);\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[0, 12]]);\n    }));\n    return _fetchListResults.apply(this, arguments);\n  }\n  window.showProductDropdown = showProductDropdown;\n  document.addEventListener('click', function (event) {\n    if (!resultsContainer.contains(event.target) && !searchInput.contains(event.target)) {\n      resultsContainer.classList.add('hidden');\n    }\n  });\n});\n\n//popup handler\ndocument.addEventListener('DOMContentLoaded', function () {\n  var openPopupButton = document.getElementById('openPopup');\n  var closePopupButton = document.getElementById('closePopup');\n  var popup = document.getElementById('popup');\n  openPopupButton.addEventListener('click', function () {\n    popup.classList.remove('hidden');\n  });\n  closePopupButton.addEventListener('click', function () {\n    popup.classList.add('hidden');\n  });\n  popup.addEventListener('click', function (event) {\n    if (event.target === popup) {\n      popup.classList.add('hidden');\n    }\n  });\n});\nvar addProduct = function addProduct() {\n  if (document.getElementById('product-container').children.length === 0) document.getElementById('add-product').click();\n  document.getElementById('showSubTotal').value = CartHook.getSubTotal();\n};\nwindow.addProduct = addProduct;\nvar updateTotal = function updateTotal() {\n  var products = document.getElementById('product-container');\n  var currentDate = new Date();\n  var futureDate = new Date(currentDate);\n  Array.from(products.children).forEach(function (item) {\n    futureDate.setDate(currentDate.getDate() + 30);\n    var formattedDate = futureDate.toISOString().split('T')[0];\n    var parcela = item.querySelector('.parcela');\n    var date = item.querySelector('.date');\n    var payment = item.querySelector('.payment-method ');\n    payment.addEventListener('change', function () {\n      date.readOnly = true;\n      parcela.readOnly = true;\n      if (payment.value === 'custom') {\n        date.readOnly = false;\n        parcela.readOnly = false;\n      }\n    });\n    date.onclick = function () {\n      if (date.readOnly) showAlert('Você não pode editar essa data! Troque o pagamento para personalizado para modificar');\n    };\n    parcela.onclick = function () {\n      if (date.readOnly) showAlert('Você não pode editar essa parcela! Troque o pagamento para personalizado para modificar');\n    };\n    date.value = formattedDate;\n    parcela.value = (CartHook.getSubTotal() / products.children.length).toFixed(2);\n  });\n};\ndocument.addEventListener('DOMContentLoaded', function () {\n  var addProductButton = document.getElementById('add-product');\n  var removeProductButton = document.getElementById('remove-product');\n  var quantity = document.getElementById('quantity');\n  var productContainer = document.getElementById('product-container');\n  var productTemplate = document.getElementById('product-template').innerHTML;\n  var addProductRow = function addProductRow() {\n    var productRow = document.createElement('div');\n    productRow.innerHTML = productTemplate;\n    productContainer.appendChild(productRow);\n    quantity.value++;\n    updateTotal();\n    productRow.querySelector('.remove').addEventListener('click', function () {\n      quantity.value--;\n      productRow.remove();\n      updateTotal();\n    });\n  };\n  var remove = function remove() {\n    productContainer.children[0].remove();\n    if (quantity.value > 0) {\n      quantity.value--;\n      updateTotal();\n    }\n  };\n  addProductButton.addEventListener('click', addProductRow);\n  removeProductButton.addEventListener('click', remove);\n  document.getElementById('checkout-form').onsubmit = function (event) {\n    var total = 0;\n    Array.from(productContainer.children).forEach(function (item) {\n      total += parseInt(item.querySelector('.parcela').value);\n    });\n    if (total !== parseInt(CartHook.getSubTotal())) {\n      event.preventDefault();\n      showAlert(\"O somatorio das parcelas deve ser igual ao subtotal!\");\n    }\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/product.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/product.js"]();
/******/ 	
/******/ })()
;